// Code generated by MockGen. DO NOT EDIT.
// Source: profile.go

// Package verifier_test is a generated GoMock package.
package verifier_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	verifier "github.com/trustbloc/vcs/pkg/verifier"
)

// MockProfileStore is a mock of profileStore interface.
type MockProfileStore struct {
	ctrl     *gomock.Controller
	recorder *MockProfileStoreMockRecorder
}

// MockProfileStoreMockRecorder is the mock recorder for MockProfileStore.
type MockProfileStoreMockRecorder struct {
	mock *MockProfileStore
}

// NewMockProfileStore creates a new mock instance.
func NewMockProfileStore(ctrl *gomock.Controller) *MockProfileStore {
	mock := &MockProfileStore{ctrl: ctrl}
	mock.recorder = &MockProfileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileStore) EXPECT() *MockProfileStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProfileStore) Create(profile *verifier.Profile) (verifier.ProfileID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", profile)
	ret0, _ := ret[0].(verifier.ProfileID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileStoreMockRecorder) Create(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileStore)(nil).Create), profile)
}

// Delete mocks base method.
func (m *MockProfileStore) Delete(profileID verifier.ProfileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", profileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProfileStoreMockRecorder) Delete(profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfileStore)(nil).Delete), profileID)
}

// Find mocks base method.
func (m *MockProfileStore) Find(strID verifier.ProfileID) (*verifier.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", strID)
	ret0, _ := ret[0].(*verifier.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockProfileStoreMockRecorder) Find(strID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProfileStore)(nil).Find), strID)
}

// FindByOrgID mocks base method.
func (m *MockProfileStore) FindByOrgID(orgID string) ([]*verifier.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrgID", orgID)
	ret0, _ := ret[0].([]*verifier.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrgID indicates an expected call of FindByOrgID.
func (mr *MockProfileStoreMockRecorder) FindByOrgID(orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrgID", reflect.TypeOf((*MockProfileStore)(nil).FindByOrgID), orgID)
}

// Update mocks base method.
func (m *MockProfileStore) Update(profile *verifier.ProfileUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProfileStoreMockRecorder) Update(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileStore)(nil).Update), profile)
}

// UpdateActiveField mocks base method.
func (m *MockProfileStore) UpdateActiveField(profileID verifier.ProfileID, active bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveField", profileID, active)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActiveField indicates an expected call of UpdateActiveField.
func (mr *MockProfileStoreMockRecorder) UpdateActiveField(profileID, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveField", reflect.TypeOf((*MockProfileStore)(nil).UpdateActiveField), profileID, active)
}
