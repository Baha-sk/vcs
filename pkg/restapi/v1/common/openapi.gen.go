// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DIDMethod.
const (
	DIDMethodKey DIDMethod = "key"
	DIDMethodOrb DIDMethod = "orb"
	DIDMethodWeb DIDMethod = "web"
)

// Defines values for KMSConfigType.
const (
	KMSConfigTypeAws   KMSConfigType = "aws"
	KMSConfigTypeLocal KMSConfigType = "local"
	KMSConfigTypeWeb   KMSConfigType = "web"
)

// Defines values for VCFormat.
const (
	JwtVc VCFormat = "jwt_vc"
	LdpVc VCFormat = "ldp_vc"
)

// Defines values for VPFormat.
const (
	JwtVp VPFormat = "jwt_vp"
	LdpVp VPFormat = "ldp_vp"
)

// Model to convey the details about the Credentials the Client wants to obtain.
type AuthorizationDetails struct {
	// String denoting the type of the requested Credential.
	CredentialType string `json:"credential_type"`

	// String representing a format in which the Credential is requested to be issued. Valid values defined by OIDC4VC are jwt_vc and ldp_vc. Issuer can refuse the authorization request if the given credential type and format combo is not supported.
	Format *string `json:"format,omitempty"`

	// An array of strings that allows a client to specify the location of the resource server(s) allowing the Authorization Server to mint audience restricted access tokens.
	Locations *[]string `json:"locations,omitempty"`

	// String that determines the authorization details type. MUST be set to "openid_credential" for OIDC4VC.
	Type string `json:"type"`
}

// DID method of the DID to be used for signing.
type DIDMethod string

// Model for KMS configuration.
type KMSConfig struct {
	// Prefix of database used by local kms.
	DbPrefix *string `json:"dbPrefix,omitempty"`

	// Type of database used by local kms.
	DbType *string `json:"dbType,omitempty"`

	// URL to database used by local kms.
	DbURL *string `json:"dbURL,omitempty"`

	// KMS endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Path to secret lock used by local kms.
	SecretLockKeyPath *string `json:"secretLockKeyPath,omitempty"`

	// Type of kms used to create and store DID keys.
	Type KMSConfigType `json:"type"`
}

// Type of kms used to create and store DID keys.
type KMSConfigType string

// Supported VC formats.
type VCFormat string

// Supported VP formats.
type VPFormat string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RVwW7bOBD9lQFPLaA6wXZPvmXlLmAk2QZ14h62RUCRY4s1RWrJkRVvkX9fDGklTiwv",
	"0oshk5w3M28eH38K5ZvWO3QUxfSniKrGRqbPi45qH8y/kox3MyRpbFrXGFUwLa+Kqbj2Gi2QB+XdFndA",
	"NYLOh0FWvqO0UgbU6MhIG/N/a9AR9NJR5GBfkTRuIgrRBt9iIIMpl3qKu6ddi8fpFxSMW4NG54k/GJxP",
	"gl+l74D/dBgJ9UEJnCajiZjCxWMhVj40kk4mCNgGjBzv1iAhnwbjoK+Nql/1CCYeJCYPFYKJsUM9gaW0",
	"RsNW2g4jaFwZhxqqHXyez8rflyXIgPCjp/utAuk0WN3eb9UE5hweQEkHAVddxJRSHo5oSAkmt742W3Tw",
	"zGDmhUH31SvfVJ5rdZ4gdm3rA6EeZcd6lXKMCODCgQxB7pjxHMAjlgTSWt9HkKDysMlDbFGZVRbJAPk8",
	"qei7oBAihi2Gd/F9Rhim+kKOsEiHGLMxjkB22qBTCYWCUcy7VAojq2uDLnJXhrBJDRy1t19IfTz/PyGF",
	"1JxGwtAYh3FkEIP+GWYC13eLW1ZAxMTBN+FbdEbfP0/mm+CRDBIYGcBjIXi4JqAW07/zbnF0Ob4XggxZ",
	"Dhy9u0+wvvqBirjR2Xx2jVR7fdztbD6DJu0NE+KVLOYuYlIRRLN2xq25ZHRdw8X5UIlC9Mi/G9ylql7z",
	"fXm9KL1bmfUpP2Hsy+sFm8rKrLuQ+ji2B13dBFyZh2OYvM6Va0myknFfdLVLwrOwaeKo0nV1Ozr8272p",
	"/DLc3ZerY7S7L1dM5S+CodOtN27EpZirYXc0NKIKSFdebS5xdyOpHqFMUp0uaTrKpWzeWBf9L2ObJmYc",
	"fiQCSsomFMmHrKkN7uKhglKyJw3JPo5oaOxGHOj/WWCvRV+Ihw8k15GjkicH8f2xEMvyz1MPwGCMsCz3",
	"zvmi2mzWohDZqg+reAId4Wx584aENycTtkPC9m0JmTDjVn5kTKGL9If1CpblYngGDp8NZkmyt/LUthjM",
	"yuydu4vsh18/lrAsP1zczEFa79bQG6rhc4tuPuMXrQ2evPL5UmfKzxIMBjCOMEiV0FLYV2ktJglbo9DF",
	"pCsnm2RqrVQ1fvhtci4K0QUrpqImauP07Kzv+4lM2xMf1mf72Hh2NS8//bX4xDETekiWN3BV+qbxLnl0",
	"TKUtU2uysi+ecn5ojEJ4tywX70UhthhiJu58wpU8FsnPZWvEVHycnKfiWkl1FFPXWfv4XwAAAP//1iFJ",
	"vGIJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
