// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for DIDMethod.
const (
	DIDMethodKey DIDMethod = "key"
	DIDMethodOrb DIDMethod = "orb"
	DIDMethodWeb DIDMethod = "web"
)

// Defines values for KMSConfigType.
const (
	KMSConfigTypeAws   KMSConfigType = "aws"
	KMSConfigTypeLocal KMSConfigType = "local"
	KMSConfigTypeWeb   KMSConfigType = "web"
)

// Defines values for VCFormat.
const (
	JwtVc VCFormat = "jwt_vc"
	LdpVc VCFormat = "ldp_vc"
)

// Defines values for VPFormat.
const (
	JwtVp VPFormat = "jwt_vp"
	LdpVp VPFormat = "ldp_vp"
)

// DID method of the DID to be used for signing.
type DIDMethod string

// Model for KMS configuration.
type KMSConfig struct {
	// Prefix of database used by local kms.
	DbPrefix *string `json:"dbPrefix,omitempty"`

	// Type of database used by local kms.
	DbType *string `json:"dbType,omitempty"`

	// URL to database used by local kms.
	DbURL *string `json:"dbURL,omitempty"`

	// KMS endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Path to secret lock used by local kms.
	SecretLockKeyPath *string `json:"secretLockKeyPath,omitempty"`

	// Type of kms used to create and store DID keys.
	Type KMSConfigType `json:"type"`
}

// Type of kms used to create and store DID keys.
type KMSConfigType string

// Supported VC formats.
type VCFormat string

// Supported VP formats.
type VPFormat string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xTUW/TMBD+K9Y9gZS1E+MpbyMbUrUWqpVlD2hCjnNNvDo+Y1/aVVP/O7LTjUELGrxE",
	"zp3v+z5//vwIijpHFi0HyB8hqBY7mZYXk4sZckt1/KkxKK8da7KQx5boUk/QUnCLIlaYRIWiD1iLJXkR",
	"dGO1bUaQAdq+g/wrkK8ggw3G7wq3cJcBbx1CDoG9tg3sMriaLQqyS90c0s6oRpOwr2YLodKu3svYjSzO",
	"k0PPGpP8upp7XOqHQ5ihHpXXkmUlw150tRWGlDRi1YWIdyCtrr6k0u+AsfpfcDfX00O0m+tptPIfwdDW",
	"jrTlQ7zo1VP36GhA5ZGnpFZXuJ1Lbo9YJrmNooatUcrqlbr4r46tujDgMAnlUTIKaWsRmPyQqRVuw8sE",
	"JbLnDMlNOJKhXQYev/faYx1HUjfu0mxw8GMfsOdJqu5RMWTwcMKyCXFKh9Cjh7tdBmXxkXwnj1i76J0j",
	"z1iLsoi57CT/ovZ+w9/WCjIwtYuLFyqeQY94Vs5fQTj/I6F7InSvI4yGabukI9fk+8AfDClRFgsRBvJ4",
	"UTVa1tKI6JK0ari1NXq91Cq9R9EHbRtxe1aIsjg5n0+ENGQbsdHcis8O7eTifVkI54lJ0fCoB8vHCQa9",
	"0JbRS5XQ0titNAZThI1WaEPKlZVdPMu5k6rFk3ejU8ig9wZyaJldyMfjzWYzkqk9It+M97NhPJ0Ul58W",
	"l3FmxA+cwrr3qqCuIyuiTyFJK9PRZGVQFD9Pv0C/1grFm7JYvIUM1ujDYNzpKCrZZUAOrXQacjgbnSZx",
	"TnIbILe9MbsfAQAA//8SqhQnfgUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
