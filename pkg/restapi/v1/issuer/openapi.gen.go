// Package issuer provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package issuer

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for VCConfigDidMethod.
const (
	Key VCConfigDidMethod = "key"
	Orb VCConfigDidMethod = "orb"
	Web VCConfigDidMethod = "web"
)

// Defines values for VCConfigFormat.
const (
	JwtVc VCConfigFormat = "jwt_vc"
	LdpVc VCConfigFormat = "ldp_vc"
)

// Defines values for VCConfigStatus.
const (
	StatusList2021 VCConfigStatus = "StatusList2021"
)

// Model for creating issuer profile.
type CreateIssuerProfileData struct {
	// KMS configuration.
	KmsConfig *map[string]interface{} `json:"kmsConfig,omitempty"`

	// Issuer’s display name.
	Name string `json:"name"`

	// Configuration for OIDC4VC credential interaction operations.
	OidcConfig *map[string]interface{} `json:"oidcConfig,omitempty"`

	// Unique identifier of the organization.
	OrganizationID string `json:"organizationID"`

	// URI of the issuer, Refer issuer from VC data model.
	Url string `json:"url"`

	// Model for VC configuration.
	VcConfig VCConfig `json:"vcConfig"`
}

// Model for issuer profile.
type IssuerProfile struct {
	// Is profile active? Can be modified using disable/enable profile endpoints.
	Active bool `json:"active"`

	// Short unique string across the VCS platform, to be used as a reference to this profile.
	Id string `json:"id"`

	// KMS configuration.
	KmsConfig *map[string]interface{} `json:"kmsConfig,omitempty"`

	// Issuer’s display name.
	Name string `json:"name"`

	// Configuration for OIDC4VC credential interaction operations.
	OidcConfig *map[string]interface{} `json:"oidcConfig,omitempty"`

	// Unique identifier of the organization.
	OrganizationID string `json:"organizationID"`

	// URI of the issuer, Refer issuer from VC data model.
	Url string `json:"url"`

	// Model for VC configuration.
	VcConfig VCConfig `json:"vcConfig"`
}

// Model for updating issuer profile data.
type UpdateIssuerProfileData struct {
	// KMS configuration.
	KmsConfig *map[string]interface{} `json:"kmsConfig,omitempty"`

	// Issuer’s display name.
	Name string `json:"name"`

	// Configuration for OIDC4VC credential interaction operations.
	OidcConfig *map[string]interface{} `json:"oidcConfig,omitempty"`

	// Unique identifier of the organization.
	OrganizationID *string `json:"organizationID,omitempty"`

	// URI of the issuer, Refer issuer from VC data model.
	Url *string `json:"url,omitempty"`

	// Model for VC configuration.
	VcConfig *VCConfig `json:"vcConfig,omitempty"`
}

// Model for VC configuration.
type VCConfig struct {
	// Additional JSON-LD contexts the profile is going to use on top of standard W3C verifiable credential contexts and VCS contexts (status, signature suite, etc).
	Contexts *[]string `json:"contexts,omitempty"`

	// DID method of the DID to be used for signing.
	DidMethod VCConfigDidMethod `json:"didMethod"`

	// Supported VC formats.
	Format VCConfigFormat `json:"format"`

	// List of supported cryptographic signing algorithms.
	SigningAlgorithm string `json:"signingAlgorithm"`

	// DID to be used for signing.
	SigningDID string `json:"signingDID"`

	// Credential status type allowed for the profile.
	Status *VCConfigStatus `json:"status,omitempty"`
}

// DID method of the DID to be used for signing.
type VCConfigDidMethod string

// Supported VC formats.
type VCConfigFormat string

// Credential status type allowed for the profile.
type VCConfigStatus string

// PostIssuerProfilesJSONBody defines parameters for PostIssuerProfiles.
type PostIssuerProfilesJSONBody = CreateIssuerProfileData

// PutIssuerProfilesProfileIDJSONBody defines parameters for PutIssuerProfilesProfileID.
type PutIssuerProfilesProfileIDJSONBody = UpdateIssuerProfileData

// PostIssuerProfilesJSONRequestBody defines body for PostIssuerProfiles for application/json ContentType.
type PostIssuerProfilesJSONRequestBody = PostIssuerProfilesJSONBody

// PutIssuerProfilesProfileIDJSONRequestBody defines body for PutIssuerProfilesProfileID for application/json ContentType.
type PutIssuerProfilesProfileIDJSONRequestBody = PutIssuerProfilesProfileIDJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create Profile
	// (POST /issuer/profiles)
	PostIssuerProfiles(ctx echo.Context) error
	// Delete Profile
	// (DELETE /issuer/profiles/{profileID})
	DeleteIssuerProfilesProfileID(ctx echo.Context, profileID string) error
	// Get Profile
	// (GET /issuer/profiles/{profileID})
	GetIssuerProfilesProfileID(ctx echo.Context, profileID string) error
	// Update Profile
	// (PUT /issuer/profiles/{profileID})
	PutIssuerProfilesProfileID(ctx echo.Context, profileID string) error
	// Activate Profile
	// (POST /issuer/profiles/{profileID}/activate)
	PostIssuerProfilesProfileIDActivate(ctx echo.Context, profileID string) error
	// Deactivate Profile
	// (POST /issuer/profiles/{profileID}/deactivate)
	PostIssuerProfilesProfileIDDeactivate(ctx echo.Context, profileID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostIssuerProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) PostIssuerProfiles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIssuerProfiles(ctx)
	return err
}

// DeleteIssuerProfilesProfileID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIssuerProfilesProfileID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "profileID", runtime.ParamLocationPath, ctx.Param("profileID"), &profileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIssuerProfilesProfileID(ctx, profileID)
	return err
}

// GetIssuerProfilesProfileID converts echo context to params.
func (w *ServerInterfaceWrapper) GetIssuerProfilesProfileID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "profileID", runtime.ParamLocationPath, ctx.Param("profileID"), &profileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIssuerProfilesProfileID(ctx, profileID)
	return err
}

// PutIssuerProfilesProfileID converts echo context to params.
func (w *ServerInterfaceWrapper) PutIssuerProfilesProfileID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "profileID", runtime.ParamLocationPath, ctx.Param("profileID"), &profileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutIssuerProfilesProfileID(ctx, profileID)
	return err
}

// PostIssuerProfilesProfileIDActivate converts echo context to params.
func (w *ServerInterfaceWrapper) PostIssuerProfilesProfileIDActivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "profileID", runtime.ParamLocationPath, ctx.Param("profileID"), &profileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIssuerProfilesProfileIDActivate(ctx, profileID)
	return err
}

// PostIssuerProfilesProfileIDDeactivate converts echo context to params.
func (w *ServerInterfaceWrapper) PostIssuerProfilesProfileIDDeactivate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "profileID", runtime.ParamLocationPath, ctx.Param("profileID"), &profileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIssuerProfilesProfileIDDeactivate(ctx, profileID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/issuer/profiles", wrapper.PostIssuerProfiles)
	router.DELETE(baseURL+"/issuer/profiles/:profileID", wrapper.DeleteIssuerProfilesProfileID)
	router.GET(baseURL+"/issuer/profiles/:profileID", wrapper.GetIssuerProfilesProfileID)
	router.PUT(baseURL+"/issuer/profiles/:profileID", wrapper.PutIssuerProfilesProfileID)
	router.POST(baseURL+"/issuer/profiles/:profileID/activate", wrapper.PostIssuerProfilesProfileIDActivate)
	router.POST(baseURL+"/issuer/profiles/:profileID/deactivate", wrapper.PostIssuerProfilesProfileIDDeactivate)

}
