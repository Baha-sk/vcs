// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lC/Y6YYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
