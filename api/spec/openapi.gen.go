// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xce3PbOJL/KijeVc1MlR6eZHJ76/tnPZJ3R3dJ7LUdb91uUiqYbEkYUwQHACVrUv7u",
	"W40HCYogRcX2PGr3rzgiHo1Go/vXjW58jmK+znkGmZLR6edIxitYU/3nWRyDlDf8HrIrkDnPJODPCchY",
	"sFwxnkWn0TueQEoWXBDTnOj2xHUYRYMoFzwHoRjoUaluNlfYrDnczQqIaUF0C8KkLCAhdzui8FOhVlyw",
	"nyk2JxLEBgROoXY5RKeRVIJly+hxEMXzjGdxgN5r3YTEPFOUZfgnJbopUZzcASkkJPhnLIAqIJTkgvMF",
	"4QuScylBSpyYL8g97MiaKhCMpmS7gowI+KkAqcyQsYAEMsVo2kXeHB5yJkDOWYAVs0zBEgRJION6VGRA",
	"yhag2BoIw+XHPEskUoOf7JjefMyMgBN2TXTTPa6/HeHBBSwEyFXXntomZpQB2a5YvCIxzXyW8zvcEpLB",
	"tjanDHJQxjwPbO/F5c3s4v3Z2wFhC8L0FsQ0xdFxKbqT26hKquKUQab+h3C1ArFlEgbk6vyvH2ZX59Pg",
	"3Jqsufk5tFj84rjnS3FgMM29nwomIIlO/1E/HLWJPg0ixVSKfUPnshyY3/0IsYoG0cNQ0aXEQTlL4u82",
	"cfTpcRBNSrm8VlQVsrmAqgWRuknzCMuya5M1lindy7QD2Obe0hrkda1LM1UEl3WRq4Bs6D+kVlbYV+uB",
	"2jmtL7PfWg4tAUnpuYopSyY8W7Blk/bpbErMNyJaVeufUKvBQ2Dp9kNQmlOW3UMyT1gSkIZLARIyZfQt",
	"y8iPW/m16foN4YL8KHmWJl+bZX2DnF1ThbvGFKz1cDyDi0V0+o+mrHzeY8rjp1J+IioE3WlWO7aWvOkl",
	"8glsaM40U38AmqrVZAXxfbsVc1/IujRnK92PxNix9STEhRCQqRu2Dgw6MR+J1qtWHVQmy/AqOo0SqmCI",
	"bYJqruWUGtkiTJKPkSy0QvgYoc4zE+CHIic0S4goMjRzh3WPncoT5RDrQlyXiucpW6604LEkOo3+8GMh",
	"H9J1LF5/u3yD66i2xvBVs1XvzyxjilEFF7Pp5LvbyZVRzl1Aw/Ug2IV4+momZUHRlNtBAuDDxw/zBBRl",
	"aUgHFlLxNfsZJNmuqCL3LEtwB61ZmukjS7Y0U2ijyJJtNHy4nVyHrX1K2XoOWZJzlgWWNsHvxH13omJn",
	"WQi+RoAhwFNWRA9JEqooWVFpsUtl2OhCgSBWMBZFmu4IjXGrNTo5aFyNQZwzy+g5s4ydFyJtkv/h6q2j",
	"2TUktitqDX9dlPyNpimoEbmh9yBJLiDGNcVAOIqtnXgLaXqf8W0JqkhOBV2DAjEiswW543gyO4jUkt8Y",
	"jAogGVcI6TYsQdBhcJs9+26kahW4si1LUwcXSawFo6Uly6wCJDyHjCVD12zomp2Ox138LintA1u3mpHj",
	"FU8TEITmecpiw3B9LMyQpFp8rLVnIUybD1dvw5SUIjZXsM5TzdgkAHPsxxJ8VqJpZNHi9u2KpVAXxJhn",
	"cVokBtEySRBIChrjwKMSd2n8hgPngi9wCCbLFRi0WKC2LlLF8rQ+vaUsLNlLQTPVAt3sgUNUaiXE7bfu",
	"pWGdJGoleLFcGdo9sbzB/1cNvWOp8a1hBDzEK5ot9SnM6o4Oara6exPzRONxXI0gUkEutfQ3RTiBBS1S",
	"hfPVNRwOEeQDz+eo79sdpA1NC7BeUAmU93Qtyh0qxpz+VIDD2OaAE4V6E62QBfd3qEK1BSzuhhJPdaY0",
	"sQai6wW7w75latUyH66QWDRDJCi0ckmhKc4FbBgvpMepCtwTVDRsA5JQuzTkd30PB4Qp8u7D9Q1hWkIB",
	"/88yR7Uj+qxOtLU1bvkBFkn9wXG8ms8QMjJTvr+4KWWFZXqSShImKAmLlG+Np5kLGLp9hmRu5EQrU8Rq",
	"wf12Sq5F9CdGr8hKGWoZtpuolwEPOcRKopFzx8/IdA4C1R5ugdY8dSG2ezoiUyOj+lDs+5IH3bqSPv1d",
	"9iPMd8ibBwv3v7KidfqM/h75OLbF0wkg1RZA09MHaPQ+HHjpg4faXIaeJl5TM5m1GD5PzVlFUZ3WnEqU",
	"qhQ2qBlZZiwk7sKevuCBwVHkR+S6yHMulDRm/4ebm0vyl/MbrXr0f64gYQJiNbLTSrKmO3cayF+vzH57",
	"ptPpGQ2fkIOFxF6KE4nKXyMutQImyJrfoSRZGmmeh+MBD2EbWWOL0waVoTaeaMyFgNQ6WAuSASR9IgXh",
	"jXO0fOoQxx7uU6s8Xk6porjSuhTlnpc4hYWmjWezJHhw8kLkXLZ41mGqzbT7FDep809LB/D3fIzAXs6m",
	"h53+4HC2cyvvL1t5jytBlldn1/G57cxb3dcVvqi+dQZ5+jr1OMGRzjw3ARec/j8FLKLT6D/GVbR5bEPN",
	"472l2zBNg+feenwWB/jWV7TD8z45bhSvUF1ky5AdW9GUZkttrmmSGGhkYS5ftCFyhGDhSGPiQXAzBMIe",
	"vmYKUZvcSQVrE3/QboxVRweQfxUZ7Nq1UJzrcRAlfE1DQeap/v2IdW9AsIXVlO9ArXgLCz5czRwHml2M",
	"9jVQL8ShBRNSEUhevXnz7R9JXtylLNahfb4g09mUfG21Nhfk0joi09n0m0PcfGyVTydkPUX0UkBOBegA",
	"AYo2wsK/9wiR2H7ERBawp0aUfyeVrqrLrO8PtC+mk5yAUmtp36akhTXk80KwbkJ6rbRd2V4WcgXJWV2J",
	"HwZaptseNm/HVl13Lmfkf68v3pOsWN8hTkI4K8CaUVm/6bHC7UALyrt3SUPRo8m5ZIptgNhLGfRG6z2q",
	"+x1JqNIDJkzGApS9z2q7XSN3hTLirnY5iyl68DrUhJBlA+mOyBUXinwNo+VoQO5AbQEy8kbDs/86OXGE",
	"ftN2daRpdDseujiqFqGhEnLbBA94gOgyXsSlgsR65ZplyCfJsmUKQ3QRBCxAgL33M/yV6EcgF2v4sOkA",
	"hh2cg4jNX2rtQs6zZl2C2feK50OOVmFfPbcqjc7mJSukEkWsDFjGDrgBt5P2uHg5XBBNPd3adKCD2TQK",
	"jO8xuZtBPTXzLdqaXTWIi5IXaYDHprEfpSr9bM8tWVCWFgLslYMNTofgBcT3IWiBvfQag/YUhOCi2e0c",
	"fyZrkJIu4YsN8a3Xhqx1o8MHwizEURacyNu1LoZ37ZkZtWXXDsFsb8d86n7HYHufA8eh7SD/vpj7vRD3",
	"Zv/svDTgfiYE+9jOtT4gsJNxfcBKqWH4wmOePCTHeKpMZMhFvo6RJv9QdsXIWhd0JEv86+k+GtgPVPx+",
	"dHCn3myczjaePIG1h9Rkja3dAnaUmvJpKBXVoBZueqaUhaMV7t6e1Ejq3JIvUZkhPvRRmj5VR6tN/ek3",
	"oDdDi38C/47VnUfI9hcpz7bjelh9BlfVkzM4GssWXJON6i/WShPWlKXRabSCNOV/UqKQ6i7l8SiBTTSI",
	"MrrGkW/w5+9THhMFdI1s0HcG0UqpXJ6Ox/VuKBl1r67sfju5JtIE932kVYb/0YX0OU4KdODI315PyO1k",
	"eHY5IzTl2dLcF17kkM2m391OULIUj7kfKB3rYUD4l82mm81HiAZRymKwcmEXepbTeAXDV6OTxhq32+2I",
	"6s8jLpZj21eO384m5++vz7HPSD2YXfQ3jdG7tHZJeA1iw2IgX99Orr8xIFgaPp2McGKN7CCjOYtOo9ej",
	"E01LTtVKi9fYz6Y5/RwtQYWSm1QhMukc+pbEJhRk6sL20V9A/eANXV0g6mlfnZw4wQGT0OJda4xRw1ap",
	"xIdOQSjJSIvnnnb7P30CZLFeU7Erk5PIxNIXTi96HERjKwHezstxbqJGQ30BOEQ/X1+o/jwUlZuc85C7",
	"fEmFMmqBbXSCcM5GZFbdc9uRCcfxSCGYvWi0l9AmwNVgdyhQ9nPlkVqqvufJ7tn43hnLe3x8fHzBPe+O",
	"C/bZ/csgm+2tiE2OEJ5YlJ67JxE2tUSOP9u/ZtPHsQeVTTstCu7KXmp4EEwbcfHhmc4ZRkOoj2mlNstJ",
	"Ih86KFHAwGPbvjX8NGgRxNn+DVDgFF9yqfYC0PKFxCl0D/MMUrSHu3pIhibEY8tThaDKwPwtSoGJZUnf",
	"fLapdBQGTw7KBOuXkIbuENuvIhednHoGCRl/Nv/Opo9dllgw2IDcz5nrMMOhLfsVJXEQzkTWowQmkdXX",
	"o6T9FxaOHhtztIjUAEeZCspZEv9mlYmXwcPKDB7mpxfNgkDdR9Us03nQ9gaqHmGRbTm2oXKgsimSo5Pf",
	"dGIOa+bRdBg+YXkoLx2rZt62lPkZuCkvZBfD2WAvDLDakn56GdBD6WRthwFFe1zmJbYqwQtEe+TV6KRx",
	"kapZ44rD7GaYBHudVlumy+4nWroM86D+xL09K4k6oDtvdWqoTsi8A51fqjj5GMU8gY9ReQh/KkDsqlNY",
	"z618kjK9qRJWTfEauutt87oE+ORpc56RMhBEEhBsA0mZAmdS51zcoEzq1Yl19mI0eBs6sDmBtmdC6BKP",
	"vzK5zK0L4gnMq6jUE1dlrqEMzVtaeWhmjTYp0E3Wj6S5GTM6ek+DN+vOGzRGp5AghnSpC4a4l7n8lSwb",
	"1qopXLpzuiMgFb1LmU5OKHOng1PaVOlaXvSSSWWrAnLB9RHjwiQar+m9a9566R0+EV4ix9HMMlWa9erT",
	"AxOatOHjBCRziesmH9xPX7W8UZysKTOVHyZ326U3+AkZutSEpukdje+N2Quy3uaUS5N0bua0dcN2dy2n",
	"PUHAIevSYCaoUsivf7j48HZamk0bjN+g6tBZalzKoWSqonbBxRLErpWROgnoafLt6qrQ6m9gZ8Tb/Ubv",
	"eKH2UJZpYQpaqqoqUw48Iu9ckUfLJB5qMMKvq291Bve8XpZS7lhtf1hGYmpivYF6EtnGqXAp2VGcM7HH",
	"r6SNXZIJzzKIlUsV/nD11my3qzdjaarT2132Dt+A2JWHVqs2BWLNMvAY+hWyKKd3LGWKgdTi6pSIHJGr",
	"88nFu3fn76fnU+TEdJfRNYt963rVffTMLHOLBL7wCKLMkxWqNU8S3p39v14unr4q+8YdNZuor9ia/Qzl",
	"wflK6noAwSCL4RlWh2POkbDoSKfIK6KxlnxnXwYAoRWK3TZX1QUPyiVm7SFsECNy1lq0gua4yszKqbQF",
	"JDQLFuOVasAZ+ArnV5y3aVON2ju/nkfn9WOXqrDFkFjTWc2V3FRzrgupiKL32n/gqOl5kdnKoXJQJnW9",
	"07KgiAHBvhQg2JJl+Nmug0k76IDEvEgT1Ag0I1QpVMote1vmPB7ji74+edWB0h+G2+12uOBiPSxEChnC",
	"h6QO2/eujHgSKkd2rw8EzInGLUvIEOYeeBijrbfGtyYBzWTvpTtbMco0vLO1e2j+mGJL54MJJu9RS6ZA",
	"71seZQiXlLnluJq+j6bhx8gTLURormTDIktrhVvqiXBt8EBjZeXOFnj52NVYzMP36bgHnwaHwwZ/5kWW",
	"7HlL2kkKOjKem1Sl55V+klNj7W6SruK0rUxFOs2S1NSvWLfac4jRimAPF/s2sIQjDiiA8ELUi7NsbU3D",
	"YUJvaeJIO+As6dB7WUvVjL234emnAXt3ZLvQy5eHml6fvA6F7ey1TWDrPWZ17HZORfuV0sTIuYQskcR4",
	"x+GkVkNFumvUeTqMiXu+BCX3k4Wrqj7UrT5iorKZCevSXj2jK6oix/rE7a73JZfa976kondo5Wj12bOe",
	"/18AorbW8LeUTQSjDM1B6h756W8jdnCATOelnz5DTOBLC6f/jfl+fcwXKIKu15f8S8Vpji0JPxgK7Vu7",
	"3SOk0xdI/jtm0+BU5aCe/sbd6wbp9cjB6e8+OnKo/Kd+S+BH7/fMbMgXad4Wfft86TgdVUcBN2hiK1If",
	"B9F3J28CeZTGyL7nipylKd/apt8GkbWR8PNMMbUjN5yTt1QsQXd49cdQTT0n72i2c3yXIUzeUqfXwysr",
	"XzDsyLmR9XdbzAso2EBbY1p/6rCsPbUvv2glGHDJDTA3KmxFpUWWgZecGgq+qj4M4+8b+5bgCyHwDpjZ",
	"eMvHYU5j3v3HX1wS53FvfAZjJy0xj2Z44Kh55mXubAgDi12u+FLQfGUxmaBZwtfEjNF4C8c9+QAdBYzW",
	"ghgh6jKVXS8atdjw5htBLRa9GzA19vdjrUMjvGOtaXIA/VPzUBCz7+PIkv7yOc/DytZjysDFHOrb2E/H",
	"Pt+NfOjRzpbbeFSrJ012f08TUqUPNJSee3e3W8tZLg/Nosefi4Iljwczh51Qml5NXWNnvdCfv999KOyd",
	"dJOXB/Nw6mWnZkKEeIUZM/DAY2eMCruhyq0PGM6mKYojr9Jx9rGTqHq+T022h8IvebeWpc5BncbcVvf7",
	"QqqbJW0v9s6mVpy0VjRF5lnzta4YWG6wdAmU16Cojh9VQZTbSzPYMUD/WpWOXlg97r2cE6xbzduW5yiq",
	"yOYZoDO15gKIl6fvV1jIllqVnkpkb30FagOk8k3o859NFdp+BqP1dsqQSu0toVqmlkHMtdIVnUHlHq+7",
	"nVx7h8mvC2mV6M/qQSc+ppStPYWxrwhMHp2fZKWzvJ9aQVDnj347wTze5dXu+Wl7hTvnX5AoeojNS1Bm",
	"cg+mWYfdKNu89qZhmNGHkjin2lsWNJNmmLDK0g8OfbnKOpjaaurIDucrTk1JhB7jhVIVm+h2v4j0pZKZ",
	"g0XPLwwXWgtk+0hw47mBHmf92VNYf3GR8JM5Pf3zi+R1Xv4SMtH2mtizKLXnth1BefIH/V0oFx8AvKh2",
	"aVQI/yL6JVhBeoSGyevsaZEJJwE3uxwew4KxhTQd6neKxwlLhnH5Cn6nW1I1bbok1Vv6L8jFapJ+RQbu",
	"Grdc4fEOjasJuDG+bfthuHlyMnJZfpA866nTTNHRFrO+qrD2dDxOeUzTFZfq9L9P/nAS4Rm1HNqnzoSN",
	"hyaQkpiH+/fitxWpNsbcXKMT1Z7jlJIdyEtoVtdW/fyq1MdPj/8MAAD//4jXwP11ZwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
