// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc/W7jtpZ/FUK7QGcAx0ln2r17vX/spvbcNr2TJptkUiyaQUBLxzYnEqkhqTi+RYB9",
	"jX29fZILfkmURMlyPtoM2r8mI/PzfP7O4SF/jWKW5YwClSKa/BqJeAUZ1n8exjEIccFugJ6ByBkVoD4n",
	"IGJOckkYjSbRMUsgRQvGkWmOdHvkOoyjUZRzlgOXBPSoWDe7lqpZe7iLFSDTAukWiAhRQILmGyTVT4Vc",
	"MU7+gVVzJIDfAldTyE0O0SQSkhO6jO5HUXxNGY0D6z3XTVDMqMSEqj8x0k2RZGgOqBCQqD9jDlgCwijn",
	"jC0QW6CcCQFCqInZAt3ABmVYAic4ResVUMThcwFCmiFjDglQSXDat7xruMsJB3FNAqQ4ohKWwFEClOlR",
	"FQFSsgBJMkBEbT9mNBFqNeonO6Y3HzEjqAn7JrroH9dnR3hwDgsOYtXHU9vEjDJC6xWJVyjG1Cc5myuW",
	"IArr2pwiSEERszzA3pPTi6OTnw7fjxBZIKJZEONUja62ojs5RlVSFacEqPwPxOQK+JoIGKGzd//94ejs",
	"3Sw4t17Wtfkc2qz6xVHPl+LAYJp6nwvCIYkmv9SVozbRx1EkiUxV35BelgOz+SeIZTSK7vYkXgo1KCNJ",
	"/M1tHH28H0VTLdZHajn8lLMFSWGGJe7Ta60JSv70JrhSCNWtrdmVzB9jShYgjEUhEjL9R32F9+WSMed4",
	"o/5/k4kpowuyVK3/lcMimkTj/ZhlGaPjDc7Sf9mvjNW+tVT7fz8+t73uRxHFWYApZr///7//J1BCRJ7i",
	"DVINg8xV1KpWUR/HfC+4MT+KOCdHs+k3l1NP35FSDI5j3USRRzf2hbgiAONLTK01O5q15/tAyecCrBwv",
	"CHAnVX7H4C4KngaGOztyAxhejtAZLIA7zi44y9DlFCVYYpQpAQiOfRu3uBRkzOXU8aUh5ZpJZo0tGnjD",
	"eyLfJbZ9Ym825Un9JXBNxF3l/tb265H8FcQ3Yis97DhT0/o5Bd5N9RCR79uCEffTavrnk+CcgwAqdYMZ",
	"LAglWo9qFqVvqafB/iGzs01XHP+3m28r2FYcWtRpCXRIIvtE2q3ECbU1OecSy0Kc5DLgD/UfQgu0UgiN",
	"fWrYpC7Jzqn177PpkUJLGaiaPwBO5UqrRDfIdL8Yo6Q3s9L9kCY1EnrWgF4WnAOVFySkI1PzI9Kwx7K6",
	"QpQLxjMso0mUYAl7qk0QheiJQyhTfUdEoKtIFNpfX0UKkpgJ1A9FjjBNEC+oQqHbZctO5VE9RLoQ1YVk",
	"eUqWKy0eJIkm0V8+FeIuzWL+9uvlt2ofFWsMXTVZNX+0za34u81oWk/SJ2LVbwGe+G4UfVqLV4YarxHj",
	"6JNgNE1emZ29RoZDmuuMwskimvzSkttRC3WoPbG8NCV9FqSxdatKLcZ4+/GYE6LbQJXomPfRuh2vcJoC",
	"XYZ0YYVTTJcKFyCcJAaPK4XQ0U84hNEWLAkjYKU0TqfMEOhogVhGpILdYiMkZEbx1iRNXRDQNU/Ntmzj",
	"WsgW3Y+ihGU4FPzM9Pcd9m1scKxt+jHIFesgQcuB+F1MzKMYF6bQgnAhESRvvv3267+ivJinJNYhJ1ug",
	"2dEMvTJQSGmF9R3q8+tt1LzvlE8nZLuIqHNbA+xBJ3JSOPk2iNhdH2Sa/CeammgxY4nygYqESuATIvA8",
	"hX2g6p+yE9AkZ4RKH3fPGUsB07pQPTBUIQGun68Yl6gwiMeQHOGYMxXIrgBdTs9RnmKp7NbIzzZggbAK",
	"kIGDzUPIFRE+zVpC+Gek9MeIlEgSjbaES1aDwnFTXU8HKncd5Pcod60hin2WtzU9IUllLgeL7OxoZnsp",
	"yrBzslRo6TBdMk7kKgshiE0u2ZLjfEVihF1DUWaZBFlSxEieoNvcpYKQIch2EBZYwcjbmUf5OhEDEu3H",
	"J9Myfmy6ZfXd2oocuDIdkKCk0LbFj5BqPqZNfIdmWyaryHPGlcepDeZBq2astZ1ll6d/M7MFzKb2dO1l",
	"nOocq8HySrD8xYQMeIMrZtQSs3/cQm0vGgysxCNDUjZEbjo039TjQcvujvEHB3OnhVhBcuint4fk3E03",
	"VOvXk3vvywIfoh/PT35CtMjmoGAJloiDZYSo556tZXTKo4yllzbW7ixngii7hGyaeIwuGj2qjLNAWOoB",
	"EyJiDtJm2Lvy/WheSAN05CYnMU7TjVIPDilWM6YbJLQjfgXj5XiE5iDXABR9q8Otfzs4cAt93ZXM1mu8",
	"LjjpSmVXm4gZ55raiU7Qs8CiXfOcCQmJogMRhmSKTgrDpLBXCGgiAPVB5KCtezmI9jeEmli1mAv1mcrw",
	"jAOsmbfV2hGBZ8f6BHNo0vlDnuyadC5Ul3bSWROgLddfFpZ5PsTh4fsumg/EAKb7jhnTkmnNjGkH2x6a",
	"Nn36nOc2hueYSxKT3MokfWYJ6M841ln8qBxiCTx7uKp22Q/tYkYl3MkAgDlMEu0Icaq9y977GXKNXeSr",
	"5YMItGTWhCpbyCiSLFfkEBLTBPME/fx2aumiAz2P8OWIysCrKKv88MokzUYa9GFZcGU1iYQRAhm/rsGb",
	"9iFfA7o8AX6tUNhwMDWtwNQNbC7CZ472vPEGNlViQRig6kHgMTpzKIbRdNPRyrj+hCHKJCJZnpKYSOVU",
	"c4jJYqMnUbQJn8o6Op+Bj+HMkhe4SKVDe5c4LZQHCe+k4tetaodWLE2AG5eOrrwRriLEOLqKfvz5/CrS",
	"HAVaZErOf/z5PBr5c33sWG9/PPGeqPBggUSJlONahBEgc9Q90SwUu86OZn46wGPLeJecs5c7NU3MOTRO",
	"U7auJ5saaQVnlxrowEprgEi+MtS25uGG0rIMdDgNKz80FJpvEG67G7VX/XFTz4kaE+FLptgxP90bkHk2",
	"6bHhmDfU44Kx6aODsWApi5dL23IGMnSg3WO6poUZehrogMSgPH5DLkPSDHc4y1MXYem/9z6tZVuWHNt/",
	"iT6t5bUCxyUTJC8gsKVGj7zZ4/6+27XXcUGfh99+wN2VptWhLghEFr4rN7nYpCP1+kDQ9ztnXJ8Ec/5u",
	"SczhR9h+xrE712iZGNCTIbnGtpxuKuflzjM1VgjSe+NbR+6Ohr2KvgUmqcIOxvQkIDFJRUf40WHjkd5X",
	"kNbAOePtbu/UZ5SBEHgJDz45uvTaoEw32s4zsxG3suBETU51EPzBXBtQTDPMNX4xp8NNCux2PByk34Op",
	"P+iI+LapO899QvxER6733VQbcmrZS7ghOdbSwihU5EHJLXJcurlB1Up9StmCbj0UGZSbC5CkhY+2WODa",
	"ccEXY4N77WZLO7to8gjSbjOTOxzp7GSm/DWUhqoNN3vOQp7N4LZwv7ekXpY8xGSG6DDEaDYPpHYym/qn",
	"F2A3Q5t/BP12tZ07yPaDjGeXum43n8FdDaSMGo3QBXN5UBxrowkZJmk0iVaQpuy/JC+EnKcsHidw6/D1",
	"JLpQn79LWYwk4Gxsz/gn0UrKXEz29+vd7lvJsrK7CnRsgqqWkRaiwCrAwTSpUdzWzvz8dooup3uHp0cI",
	"p4wu0ZrIFTrJgR7NvrmcKsmSLGZ+Jc++HgZ4Ldutu/2sBF0fOqUkBisXdqOHOY5XsPdmfNDa43q9HmP9",
	"85jx5b7tK/bfH03f/XT+TvUZyzvDxVqoobPAHiI8B35LYkCvLqfnrw0IFoZOB2M1sUZ2QHFOokn0dnyg",
	"15JjudLite/XPU5+jZYgQ2WosuBUuHPIjhLUMvd/lEST6HuQP3hDK2NnBExP++bgoEygUz0jzvPUcmlf",
	"WdjqTtY2LQiVg2rxbFi3v2sNEEWWYb4py0jR1K4vXAh6P4r2rQTYKFl0kul7kALhNG2c3RmDitGS3AJt",
	"hbQtqtWOrsRjCTfIjtSrZdp2Yzstvwepd17bso3gKbbb1Z6XCRkMcLAE0Tz0NLeluDZnQnliW/3nSv+M",
	"hVI/aEMgGbfwp07UUyZCVNVnwN+xZPNkkth1W+P+3nj7Z1KABvvC7BpF35gp6z99hxN9OgJCmjZ/DSZG",
	"NbkPUw442aB3d0RI0ZAAs3fkpUGaue6AKu3/av86mt2beVOQwXSb+t6SD3s23MN607HO/FM3ZYdubRF1",
	"M2TfRkd95oE2NzHfoKPZAEuwbdkvS5Ra1qGXXjnmOAMJXGj03ChnmBkU5foriKgdWAUo8hptHKiWvICR",
	"t/EmTvw4ivIiwChzvtySNiVkkGy3NkUv457e6nRVPLwEq1MTA7PQR5iIfZ2HxcZC/H4yE3Rhh3ZpIlD6",
	"vc0dlRLiBnmYZXK9H0NhL9Fj2r1AUh8179qIHiJXSPm5vH7oxssT6F7zkHq7fumFeGR5CP8TeME6NisX",
	"9ygtq4Z5KALAAzWNkSTed0WK0Bk4nBwWcoXejA9aBa1aWkclENb/1cfwS46prJ4L0FjbCwrdNZAgrjgh",
	"SXxYLmqL99U1JOj4w/kFmgMSINVsV1HMEriKxo7tnwvgm4rvjqjmCv8uvB+FKk/NOwXe+WDXvKbhtT7L",
	"e8Sch6jMbKEEOLmFxGBN/WgCS6pzRVM0RFRoTKUrUA1WpbpzWNszQXiJCRUSpVj2bIglcF2l2R65K3Ou",
	"Zta8xtXVALNHs7NysmFLus7KcpjdeBqscOaQEA6xLZIrBPA9vNR3VZn3YMVXomyo+jpZRzmHW8IKkW4Q",
	"CInnKdFF4jpL01lUbUtYqtERhyUR0hZB5pxpFWPcPHaS4RvXvLP4OKwRZsG25nhHYpn3O+rvkmyZ0LwT",
	"spuAUMRy/LlwxWdaPGpPhSg+ZJjoww6d+YGyzNwvjMc0QTFO0zmOb0wBfJD0hMZpkYAwRQhmTvuijOWu",
	"pbQnCGrIujSYCUobhs5/OPnwflarKlOCoUyHLlViQuwJIqvVLhhfAt90ElIaR/EY+b6250AoZvQWNka8",
	"3Tc8Z4W5B+Cfsqn/r3VqEa0xNUbfPBQzRsdFKkmedk7iPS9jhF9XF+ZASXLtpUklqzhW4w+hKMYmeZ25",
	"qRpoK0Sp4Gp2o5xJpn4lbDIWTRmlEEuX+Plw9t6w2/5f34YoBJS3KNgt8E2ptNq0SeAZoeAR9CtFohzP",
	"SUokAVMbV92bRGfvpifHx+9+mr2bKUrMNhRnJPa961m/6plZri0SeKAKKplHK2XWPEk4PvwfvV2lfdUt",
	"CKdqRkZySTLyDygV5yuB4C4HToDG8AS7U2Neq4XttjP7/pTRcuvJN/bNKODaoFi2uWeq4E66CzKN3D7w",
	"MTq0Q5lEIxGeBSDCuyGTYyFM1G5TL/pgQN9Tqt9TKR28RZbWyBjK2+sr5Z0Wfy7nRdVMugti+bUxjmaJ",
	"NZvV3slFNWdWCIkkvtHXh5iy9KzQEoBlNSgRukR5WWCFAcG+IcXJklD1s90HEeV9ipgVaaIsAqYIS6mM",
	"cgdv3RzRFnheA81vD970BDZ3e+v1em/BeLZX8BSogg9JPdJpFtUnoZcw3LtUAXeiccsSqIK5W55M6+qt",
	"8a25CGRuUaUbhBeawRre2dfYlPsjkiwVnbXDI+JGWckU8I3oLFru2Q4ixqdfmYZXkSdaCqHZs0OHLK0X",
	"DiMPvTe4w7G0cschhgZ2NR5ze4GA4kG79LQdg/6NFTRppiFCMYwXIVU3pMoQKce6qKHjcMBsWgBNBDKh",
	"UvimmQEN6UaxKQg4lKFfghTNG3zlaa1WNN99YtG+nubuonkW2I3Xmrg7DlPxqQrETjEfnJfYWZfCHnny",
	"B8Qr7ec1ylBxMjjkbA9SD88mLyOQ3LJMF7JNniBAbJf6Og8y+RMAvHAA0OJdLUad/MGC9gA1/BzWZOe8",
	"2NCXOwfE90NRxZ8BfPuCQBmtTF54rNVaej2MnHzxofK2O/n1lLGfym242RAwbZ+2fP1kBzx9TwEEMPHU",
	"PhCmz8m/DVQJGif7E5Po0NxR1E2/fhsqvDIS/o5KIjfogjH0HvOlrtH55k2gVEO1OMZ04+jerNLoeDdj",
	"AEQv3zjuOZMT9SeslbCYal3tiHH9MeSyRAju4pWusGeLUGhmMLmxXissLKhUuEfHZ/aVwUWRtmx79RpI",
	"GHpf2NeGnwl89yBMF/6NXPzn4Kbx7Goj5gVnbfJ6fWEn4BviwTWB22HiTvNcl0WhIfjr3xnWUsAxTVjm",
	"Lq051Fu+Ps64fs8Eeh4Usc7DCFGfl9RnZLu573qA0uPM+7FSi79XtQ6tMN860mQL8FcKJVdAuPG1olx/",
	"+eD3djvrEcXKSZONw8zr0xWShJ71fqrKI/cof7+Bc1vfocSzeXXUVDxuLe5s3Bb8bco7m1cUH1rgeZim",
	"yFt4sFy+v76zdWG9VeGJkVvtQ6o8g+R9rjrP0AMkimg1p5GlW6o6nlOzWox/YaWh/nWCkBruWh7afg9h",
	"YIFoU26eq0S0pirdBqa1j+4a0V1X/lvK1YAa0LrteJFVoC1mDK8D7WfOc1WChu3Sl2JohlWM7mI5voyq",
	"0dBbFNsd3PNXju5Eab961NwgfBE076Dj5vlrQ4PX3X8LZQxdjR5iplsPTTxUFL6YQtKW4qETGgOq1p+o",
	"wGuDsJSQ5TpOtA8g+bn8DFO8hEwF8YyHn8TTj7t5z62YlJzBvvZ4Ql/I3lHzn7WadSeW196X+hL037//",
	"+qwGoHV9+zcxAcHrvTsYgbxOno5LwCY9ZFhbXXGd7O+nLMbpigk5+feDvxxEiiF2iKYMmBT3nsn8JOaV",
	"z0auuZIGmw9vVxi5dQ0cp9xGe6TAPdeqn38/9P7j/T8DAAD//w99w5hIcAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
