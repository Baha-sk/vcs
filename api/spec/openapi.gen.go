// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HIEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
