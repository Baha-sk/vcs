// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcbXPbOJL+KyjeVU1SJUueZHJ7q/uyHsm7o7sk9tqKt642KRVMtiSMKYIDgJI1Kf/3",
	"rcYLCYogJcV2JlM7n+KIeG00nu4GnsbnKOarnGeQKRkNP0cyXsKK6j/P4hiknPI7yK5A5jyTgD8nIGPB",
	"csV4Fg2jdzyBlMy5IKY40eWJq9CPelEueA5CMdCtUl1sprBYs7npEogpQXQJwqQsICG3W6LwU6GWXLBf",
	"KRYnEsQaBHahtjlEw0gqwbJF9NCL4lnGszgw3mtdhMQ8U5Rl+CcluihRnNwCKSQk+GcsgCoglOSC8znh",
	"c5JzKUFK7JjPyR1syYoqEIymZLOEjAj4pQCpTJOxgAQyxWjaNbwZ3OdMgJyxgCgmmYIFCJJAxnWrKICU",
	"zUGxFRCG0495lkgcDX6ybXr9MdMCdtjV0bS7XX85wo0LmAuQy641tUVMKz2yWbJ4SWKa+SLnt7gkJINN",
	"rU8ZlKCMeR5Y3ovL6eTi/dnbHmFzwvQSxDTF1nEqupJbqEqr4pRBpv6HcLUEsWESeuTq/O8fJlfn42Df",
	"elgz83NosvjFSc/X4kBjWnq/FExAEg3/Wd8ctY4+9SLFVIp1Q/uybJjf/gyxinrR/YmiC4mNcpbEP6zj",
	"6NNDLxqVenmtqCpkcwJVCSJ1keYWlmXVpmisULqnaRuwxb2pNYbXNS8tVBGc1kWuArqh/5AarLCuxoHa",
	"Pq1P87C57JsCDuXAWYxZMuLZnC2aYx9PxsR8I6IVWv+CqAb3ganbD0FtTll2B8ksYUlAGy4FSMiUwVuW",
	"kZ838oWp+pJwQX6WPEuTF2ZaL1GyK6pw1ZiClW6OZ3Axj4b/bOrK5x2hPHwq9SeiQtCtFrUTaymbg1Q+",
	"gTXNmRbqT0BTtRwtIb5rt2LuC1mV5myp65EYK7buhLgQAjI1ZatAoyPzkWhctXBQmSwjq2gYJVTBCZYJ",
	"wlzLLjW6RZgkHyNZaED4GCHmmQ7wQ5ETmiVEFBmauf3YY7vyVDkkupDUpeJ5yhZLrXgsiYbRn34u5H26",
	"isXr7xdvcB7V0hi5arHq9ZlkTDGq4GIyHv1wM7oy4NzlaLgaBKsQD68mUhYUTbltJOB8+P7DLAFFWRrC",
	"wEIqvmK/giSbJVXkjmUJrqA1SxO9ZcmGZgptFFmwtXYfbkbXYWufUraaQZbknGWBqY3wO3HfnarYXuaC",
	"r9DBEOCBFdFNkoQqSpZUWt+lMmx0rkAQqxjzIk23hMa41No72WtcjUGcMSvoGbOCnRUibQ7/w9VbN2ZX",
	"kNiqiBr+vCj5B01TUH0ypXcgSS4gxjnFQDiqre14A2l6l/FN6VSRnAq6AgWiTyZzcstxZ3YMUmt+ozEq",
	"gGRcoUu3Zgk6HcZvs3vftVTNAme2YWnq3EUSa8VoKckyC4CE55Cx5MQVO3HFhoNBl7zLkR7itm60IAdL",
	"niYgCM3zlMVG4HpbmCZJNflYo2chTJkPV2/DIylVbKZgladasEnAzbEfS+ezUk2ji9Zv3yxZCnVFjHkW",
	"p0ViPFomCTqSgsbYcL/0u7T/hg3ngs+xCSbLGRhvsUC0LlLF8rTevR1ZWLMXgmaqxXWzGw69Uqshbr11",
	"Le3WSaKWgheLpRm7p5ZT/H9V0NuW2r81goD7eEmzhd6FWT3QQWSrhzcxT7Q/jrMRRCrIpdb+pgonMKdF",
	"qrC/OsJhE0E58HyGeN8eIK1pWoCNgkpHeQdrUe8QGHP6SwHOxzYbnCjETbRC1rm/RQjVFrC4PZG4qzOl",
	"B2tcdD1ht9k3TC1b+sMZEuvNEAkKrVxS6BHnAtaMF9KTVOXcEwQatgZJqJ0ayru+hj3CFHn34XpKmNZQ",
	"wP+zzI3aDfqsPmhra9z0AyKS+oOTeNWfGUjfdPn+YlrqCst0J5UmjFAT5infmEgzF3Di1hmSmdETDabo",
	"qwXX24Fci+qPDK7ICgy1DttF1NOA+xxiJdHIue1ndDoHgbCHS6CRp67Edk37ZGx0VG+K3Vhyb1hXjk9/",
	"l4cNzA/ImxsL17+yovXxGfzu+35sS6QT8FRbHJoDY4BG7f0HL4f4Q20hw4EmXo9mNGkxfB7MWaCodmtO",
	"JWpVCmtERpYZC4mrsIMXPNA4qnyfXBd5zoWSxuz/NJ1ekr+dTzX06P9cQcIExKpvu5VkRbduN5C/X5n1",
	"9kynwxntPqEEC4m1FCcSwV97XGoJTJAVv0VNsmOkeR4+D7gP28iaWBwaVIbaRKIxFwJSG2DNSQaQHHJS",
	"EF44N5ZPHep4QPjUqo+XY6oozrSuRbkXJY5hrsfGs0kS3Dh5IXIuWyLr8KhNt7sjbo7O3y0djr8XYwTW",
	"cjLeH/QHm7OVW2V/2Sp7nAmKvNq7Ts5te95iX9fxRfWt85Dn0KAeOzgymOfmwAW7/08B82gY/cegOm0e",
	"2KPmwc7U7TFNQ+befHwRB+R2qGqH+330uVG8RLjIFiE7tqQpzRbaXNMkMa6RdXP5vM0jRxcsfNKYeC64",
	"aQLdHr5iCr02uZUKVub8QYcxFo72eP7VyWDXqoXOuR56UcJXNHTIPNa/HzHvNQg2t0j5DtSSt4jgw9XE",
	"SaBZxaCvcfVCEpozIRWB5NWbN9//meTFbcpifbTP52Q8GZMXFrW5IJc2EBlPxi/3SfOhVT+dkh2oopeF",
	"XEJyVkeb/R6BqbbjRLY7AV2XA2fkf68v3pOsWN2iQUe/S4DFe1m/krCr4KwrLox3m0DR9c65ZIqtgdjb",
	"Awyb6jWqiwhJqNINJkzGApS9eGm7BiK3hTLrorY5iymGmvpMBG3rGtItkUsuFHkB/UW/R25BbQAy8kb7",
	"Ef91euoG+rLtjkOPcVYI1nbDUU1C23SUtolyeWDQ5cEGlwoSGz5qkaGcJMsWKZygLytgDgLsBZWRr0SH",
	"F6VYc2SakUrYE9/rWvhTrd0cebDbpZiH3kV8yBG+dnGk9QCws3gpCqlEESvj1WEFXICbUfsBbtlc0Ow/",
	"HhY7zNhkHAXa94TcLaADIeQGQXFbNeKOc4s0IGNT2D9OKQNCz3+eU5YWAuzZuD1FDdlBiO9CNhBr6TkG",
	"gR+E4KJZ7Rx/JiuQki7giy3GjVeGrHSh/RvCTMSNLNiRt2pdAu9aM9Nqy6rt8we9FfNH9zv2CnclcJxb",
	"GJTfF0v/INdwvbt3ntszfCJX66Fdaod4K52CO8RZKRGGzz3hyX16jLvKHGG4I5pjtMnflF2HOa0TOlIk",
	"/j3qIQjsR9S/HwzuxM3G7myTySNEuw8ma2LtVrCjYMofQwlUvdq5yBPdrR8NuDtrUhtS55J8CWSG5HAI",
	"aPqjOho29advADdDk3+E/I7FziN0+4vAs2277ofP4KwOlAy2xrI518NG+Is1aMKKsjQaRktIU/4XJQqp",
	"blMe9xNYR70ooytseYo//5jymCigKxSDPtyOlkrlcjgY1KuhZtSjurL6zeiaSHMK7Xta5Tk1hpC+xEmB",
	"ARz5x+sRuRmdnF1OCE15tjAXWxc5ZJPxDzcj1CzFY+6f6A10MyD8W1FTzV6cR70oZTFYvbATPctpvIST",
	"V/3Txhw3m02f6s99LhYDW1cO3k5G5++vz7FOX92bVfQXjdHbtHabdQ1izWIgL25G1y+NEyyNnE772LH2",
	"7CCjOYuG0ev+qR5LTtVSq9fAp30MP0cLUCEWjipEJl1A38LAQUWm7nw5+huon7ymq5su3e2r01OnOGCY",
	"F975+wARtuK87tsFITaMVs8ddPs/vQNksVpRsS1ZNGRkxxfmwTz0ooHVAHvjLQef7V+T8cPAc4xMOX3E",
	"7W4SpTYGwdtsd2w10VRGhD29KNUmKTuJfEOhRAE9TzC72PepF+U8FKVPdg+mA2t2yaXaOReTUXnE8iNP",
	"tk+2aKHj4YeHh4dH6smOlT1AC/RAPLF4mlAG68coQUUM+xa1wJxcSB8s2zYwKoOnByXv8zm0oftA5TfR",
	"i05JPYGGDD6bfyfjhy7cFQzWIHepPB2gG1qy31ATe2GCpG4l0Imsvh6l7V9ZOQ5YmKNVxHMs5KBkqHGW",
	"xN8smHjEAlYSC5jPepgE3TLfh2KZpmfa+4Z6PC3bqH+hLIWyKA5Hc3I0X4A1r/c7DJ+wMpSXTlQTb1nK",
	"a2NclGeyi2GSyhNA4FG9HuFG7WW5tG0GVO1BSZdqBcGLs0Ityav+aePaTIvG5azYxTC8X832K1l8u/wv",
	"R3wN4ieu7Vk5qD3YeaMZa5ondgua9qY4+RjFPIGPUbkJfylAbKtdWKd8PQpMpxWPzuTUYHDW1q/j5SaP",
	"6/OMlGE/SUCwNSQlM8cwelyUWHINNd/HXoMF7756lqpkayaELnD7K0OxbJ0QT2BWnUE8clbm0sGMeUMr",
	"gqSZo+Uquc4OG9LMtBkdvabBe1Rh6VTG6BQSxAld6DwG7hEqv5NlwRrJ27Ew0y0BqehtyvRVdEnpDHZp",
	"GZw1uuaCSWXJyrngeotxYfiPK3rnirdecYZ3hBmwvdk8UlgmeayeFLenQ8NmPE5BMsenNTRVn1VnZaM4",
	"WVFmCOmGUuous/3rd82Ap2l6S+M7Y/aCordUV2m4sKZPm85oV9dK2lMEbLKuDaaDitl6/dPFh7fj0mza",
	"o9c1Qocmz3ApTyRT1WjnXCxAbFsFqbnKj9Nvl+6BVn8NW6Pe7jd6ywu142WZEoZnXyV7mCzFPnnnuOct",
	"nXheg1F+nRSoiaWzOlu+XLHa+rCMxNSc7AVo7rJNUuEMl6MkZ06avpP2pIqMeJZBrByD8cPVW7PcLg2G",
	"palm3TquBl+D2JabVkObArFiGXgC/Q5FlNNbljLFQGp1dSAi++TqfHTx7t35+/H5GCUx3mZ0xWLful51",
	"bz3Ty8x6Al+4BVHnyRJhzdOEd2f/r6eLu6/iWritZvnDiq3Yr1BunO+kpikLBlkMTzA7bHOGA4uODIo8",
	"br+15FubsAxCA4pdNpdsAvfK0XB2PGwQfXLWyqVHc1zxcHIqLa+dZsEcoRIGnIGv/PxK8pYk00gJ8tMM",
	"NN0Yq1R8ezPEGmY1ZzKt+lwVUhFF73T8wBHpeZHZhIayUSZ1GsaioOgDgk1gFmzBMvxs58GkbbRHYl6k",
	"CSICzQhVCkG5ZW3L1IxjYtHXp686vPT7k81mczLnYnVSiBQydB+Sutu+c0HAk1CWpEuKDpgT7bcsIEM3",
	"d0++fltt7d8aupHhaqVbm8jGtHtnU4rQ/DHFFi4GE0zeIUqmQO9acsXDmS5uOi7V6KMp+DHyVAs9NMck",
	"t56ltcItaQ44N7insbJ6Z/NOfN/VWMz9t6e4Bp96+48N/sqLLNmJlnSQFAxkvDCpImOVcVJO9bVvOBAf",
	"mZlLyBJJTLwUJrUZzyHdNhKSnNeBaL8AJXfJglX6Ce4234ZS2WTCOdqbB8Oiysapd9wejGFQjtHYJRUH",
	"B9tHb6gDE0//DZyW1mTTFn5vMO5sNlKP0YbfRjS5Z5gubhs+QZT4pRl+f3gBv70XEMjW8wLV4b9Z5H5s",
	"7uLew7FDkwwPCPIPdS3+iOIbkqpCluE3HnA1hl6PJYe/+3h5H/2/fm7sn+fumNmQd9q8P/j+ye4PurIO",
	"Ao7xyKZOPfSiH07fBHhUxsi+54qcpSnf2KLfvw5dkRoNP88UU1sy5Zy8pWIBusKrP4eSPzl5R7Otk7sM",
	"OegteToH+OnlU1sdLAxZf2DApOpjAW2Naf1NrjJJyj5RoEEwEKQZx9xA2JJK61kGnhxpAHyVfRT2v6f2",
	"0atn8sA73MzGoxPO5zTm3X+lwJG4jnuMLhhNt0TBzYDxqH5mJXcu5AOLba74QtB8aX0yQbOEr4hpo/Fo",
	"g8tNho4EJmtBjBJ1mcqupzdabHjzMYsWi97tMDXW92OtQiPgt9Y02eP9U/OiBbMPOchy/OW7c/vB1hOK",
	"1ZPdZTwMY5/ujjb0ulzL/SzC6mlT3D/ShFQXyg3Qcw9EdqOclfKJmfTgc1Gw5GEvc9AppanVxBrb64X+",
	"/OP2Q2FvKZuy3MvMqKedmQ7RxStMm4GXyDqveLEaQm69wTC/oiiOvFzF3gdOo+oMkJpunwg/gd5alroE",
	"NY2xLe/vmaCbJW1PS07GVp00Kpok06z5rEwMLDe+dOkor0BRfX5UHaLcXJrGjnH0r1UZ6IXhceeJh2De",
	"Wt42PTeiatg8AwymVlwA8Xi6PsNatnDVDwSRnfkViAY4yjehz381WSi7nDYb7ZRHKrVHL2rcHeMx16jr",
	"mlPjXlm6GV17m8nnhbdq9Gd1r6lwKWUrDzB2gcAwq3zajX6G7bEM4rp8dO60eWXGy93xiVyF2+dfQB3c",
	"J+YFKNO556bZgN2AbV57fCss6H20vrGOlgXNpGkmDFn6ZYwvh6y9ZEeTR7KfwTY2mRK6jWcirzW9290k",
	"sueitwaTHp/ZXWhNkDtEgxvpxgfs9ScnNX51lfDpfR7+fBWm3+XX0Im2Z2+eBNSe2nYE9clv9HcBLr4D",
	"8Kzo0sgQ/Cr4EswgOwJh8rp4WnTCacB0m8NDWDE2kKYn+kHNQcKSk7h8rrkzLKmKNkOS6tHnZ5Ri1clh",
	"tHN3jVvO8PiAxrHEpya2bd8M00fTU0tCevKku04LRZ+2mPlViXXDwSDlMU2XXKrhf5/+6TTCPWoltDs6",
	"c2x8Yg5SEvPC9M75bTVUe8bcnKNT1QPbKTW72VIgu66q52elPXx6+FcAAAD//5WJGXoeYgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
