// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
