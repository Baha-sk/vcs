// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
