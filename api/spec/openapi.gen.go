// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
