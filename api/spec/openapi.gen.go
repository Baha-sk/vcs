// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"m0QAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
