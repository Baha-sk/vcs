// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a3PjNpJ/BaW7qsxUSfJsHru3vi/rSM5GdzNjr+3x1tXOlAsmWxJiCmAA0LIy5f9+",
	"hRcJkgBJ2dYk2d1PmVjEq9/d6G58HiVskzMKVIrR8eeRSNawwfqfJ0kCQlyxO6AXIHJGBag/pyASTnJJ",
	"GB0dj96xFDK0ZByZz5H+HrkB09F4lHOWA5cE9KxYf3Yj1Wft6a7WgMwXSH+BiBAFpOh2h6T6qZBrxskv",
	"WH2OBPB74GoJucthdDwSkhO6Gj2OR8kNZTQJ7PdSf4ISRiUmVP0TI/0pkgzdAioEpOqfCQcsAWGUc8aW",
	"iC1RzoQAIdTCbInuYIc2WAInOEPbNVDE4ecChDRTJhxSoJLgrGt7N/CQEw7ihgRAsaASVsBRCpTpWRUA",
	"MrIESTaAiDp+wmgq1G7UT3ZObz1iZlALdi101T2vj47w5ByWHMS6C6f2EzPLGG3XJFmjBFMf5OxWoQRR",
	"2NbWFEEIioTlAfSenV8tzt6fvB0jskREoyDBmZpdHUUPcoiqqCrJCFD534jJNfAtETBGF6d/+7C4OJ0H",
	"19bbujF/Dh1W/eKg51NxYDINvZ8LwiEdHf+jzhy1hT6NR5LITI0N8WU5Mbv9CRI5Go8eJhKvhJqUkTT5",
	"NiGjT4/j0aykywsDhS6OPlvMZ6ga4QDX5umUpO155ou5grtBtWXjii3QGgvLcresoGkQ0EvGNziwxR/0",
	"30vCrya9BcUoUWjrfbNle8L/uTx7j8406HzREOF9tWiN/9Uf2icUa5xl5QGRZNMWmh7dH1pk5JHQ8PM1",
	"qEn/OtbY8cinTQJPIZ5+fdCmni6VkEusBGJEhJwgjSEREN6GwURxK9RpqMx2TYGCvV1M0bsPl1cKKTkH",
	"AVQa2e2BmAhEmUQcZMFphIqi2iW6ywOomNnzVYzeLnlJPVMBUq3GKJwtR8f/+Nza3ucmI3zqYHcfqrVd",
	"LmtywHJgJ1waHGJXrO07wipPFrSXEstCtE/lsYbQn7QZQ5RD2zrIio3u89kJ7OfBk13WPgmeSwOWB491",
	"lgfwdab/IbQUUGM1N9SwUj/msLP0HUFtZeAp5iSdMbokq7DWMr91CKy/KN6Gh8DR7Q9BjswIvYP0JiVp",
	"gBrOjTgyhi2h6KeteGWGvkaMo58Eo1n6yhzrtSV8hTUiYSOewGv2T5hzvNOgdmAtYTOI5FO4x7mh+NOH",
	"ZI3pCk58G33GUhhgaYAZqwVbIdcoYSmgJWcbw9QcMfXnFh5YfqMofADxlF96BNS74YHU1DFPTEu6X9Dm",
	"uSCQDzfG+Gqff8A5B2DYO+iPgDO5nq0hudvraGs9DiVqYFTWJQXnQOUV2QQmnZkfkVZJVtxX3p/TG6MU",
	"S5iob4IeQ0QOG+mh9P7HkSi0bf1xpNwHs4D6ocgRpiniBVXqvF+t2KU8WguBrgvqBmQaYhr0C0okwRKU",
	"UfXtbDGApdyIlh22EKJQtha6iJnzNS/7JgWJSRZSYIWQbEN+AYG2ayzRHaGpQo513haGbLeYSm3pr8i9",
	"toCuZ5dhgyXDZHOTYolDRGWAq092zmHiaFnpe8UoP2RsO1VTm+NeAr8nifJdpUBYoLNzPXKLswwkwnme",
	"kUSfToRMcrMToGnOCA0AeaZ+R+53R4/2vJplt2vgNcNdT4nU4TzHp3JE8VICR5b6lkWW7RBO1JG1OOh1",
	"ho0De0Msym+IRfFNwbP29j9cvPVNJk0LdqhSPv65MPq7BtkUXeE7EMpoTtSZEkBM8YZdeAtZdkfZtrRQ",
	"UY453oAEPkWLJbpliv07NqnZqzUZ5qBt8Zyze5Iqo9kYwVbAuJmqU6iTbUmWOdsbJZpEI18SWhqQOVCS",
	"TtxnE/fZ8dFRF7zLnQ4JMxnaO1qzLAXuk6ChWDMlqg6faCVccPPNh4u34Z2UJHYjYZNnGrABZ/zK/hjw",
	"KQ0tWuN5uyYZ1AkxYTTJitTY3ERof4HjRE08LeMkOt6iJs45W6opiChPYLydQqmEIpMkz+rL252FKXvF",
	"MZWRUItluARTRyEO33qUDsMIJNecFau12btHllfq/6sPPbbU/pkBhK+UaT0wqeRJPRypNTahSJ2GIyEh",
	"F5r62yScwhIXmVTr1WWtmiIIB9/SCVLaPc4KsC5lGdhqSH1Fd0pE5/jnAlxMzDA4kkqCK1VnndNbJcy1",
	"mi1uJ9a11ps1ITV9YMfsWyLXkfXUCZE1ipEAqVRpWnATXIF7wgrhQaoKxiElaMg9CITt0RS86zgcIyKN",
	"O080hYL6f0Ldrt2mT+qbtlrPHT8AIqF/cBCv1jMbsRGE92dXJa0Qimq2lVFJy4xtjduec5jgUmHdGDoR",
	"LgIRxLcTchHSnxm5IiphqGnYIlEfAx5yUNpP6UTLfoamc+BK7CkUaMlTJ2IX40NzQ6OaKZqx394wbLk/",
	"/bsYtjE/utFmLIX/SovW92fk99R3hyIOs3N4xqNCAL/JCb2pDLcnWh3fM5YBppZORQ4JWe60yF+DXCsm",
	"cMGJ6vC57+5pRav2g84X7xHOmBrreMrdpxiq1eGsOj1Z8KitVBi6NXuq+QERG3Kg8d8a3R8BHGKCxlzs",
	"gbaM3U1Ew3vy3ErESizlWCj2yeBeqQBCjSmg0NEQjCwwuYY2uizynHEpjH3z49XVOfrr6ZWWsfp/LiAl",
	"HBI5tcsKtMG7MvD4twuDOc9GcAJV24kKgoooNIULpeW0aSnXQDjasFvFMn8vDdrwRcVD2BiogcWJPc8o",
	"NszGOIfMBiSWiAKkQ4LOYcS5vXzqIMf9nNHa8OvzufUb6lTks9kclnpvjC7SoITIC54zAd3OdGjZgAvR",
	"+Mznlg5fy3PrArhczPvjHMHp7OBP0VNEYa9OokBe8e486J9VPG/lXFe4rx4jjgZFhwbB1AJ7Br+YCVCq",
	"5f+Tw3J0PPqPo+oa/MjegR81jm7Dmi2Yh2PHIbgNJe3wus+OsyZrJS7oKqSw1zjDdKXtEpymxga09jxb",
	"xlwPZWuGr0BTz9cwUyj7jm2IVOap2AkJGxPN0f6aFUc9Lk4VSe/CWigu/DgepWyDQ3cgc/33Pc59D5ws",
	"raR8B3LNIiD4cLFwEGgPMdLX2LQhCC0JFxJB+vV33/3hzygvbjOS6AshtkTzxRy9slJbGybG45ov5q/7",
	"oPkYpU9HZANJ9EyZQufOMhYxiaCtGLVtYxvlmHBRu2AtZ9C6uiBZat1hxiFsmaJXFz/M/vinb//82tgY",
	"Bg56kHWyjHo3Vq4L+Wjrqj6f9v0CTGLDFGEdYX8VkHAIy+mW5R63mYcaqw15U19h7O24uT+3lieWmogb",
	"iO9zDjnmoCNfSpSdRNRWTC3Y8ciEztQMDZdp/2CklQFTJQM2jE53eJMFBUJtobmdoOFT7+uAXWt6dnfJ",
	"wtiJH0fKoPs46vaUXgjroRuNQVh6GYz3W/8DUB5NCKjhPB6INcz/lWiwf53P3fAgVuor8YqQuzRMk4e0",
	"7SjWkN4Ep9v/AOcnF93bjhn2HFNhQnPIZN84Ix5QkSds0/at/UvOPUzLElTjGLICFv8wktqTPjuMyQAt",
	"/lMlMw2igvDIAyYdPRhN1Lyub+PrqYi+AFFkcm90x4TNQVJWKqS2iCUS75N8F8DIxYdT5Xx710c2P2mn",
	"3P57TDJ8m4GLelrn6+zcXY6aKLc2CglNlQUK1SWZZGYAauZfIUKFBKwv85I2CNGrOSyB81qujQ6JvI5E",
	"oCLe0rjKvzHn7yIXi/WhRFOIdUjvDzFVCrFuaCo7OC4zfhUjJZbiMI5sx4duD3j2gDKk+1sGethga6Ar",
	"g80mBtJic6sDrVgiDjbqI+qZbFawOTdCuWdechsWCKOcCSLJPbicOMU/9RFVXpxAWOoJUyKUse3lhoay",
	"1NFtIQ0jyl1OEpxlO3MFnGG1YrZDYs24RK9gupqO0S3ILQBF3+lo4h/fvHEbfR1LwTamRsFJLAG7OoQ2",
	"ChS0zaUeC2y6vMdlQkJq5YgGmYKTIHSVwaQQOrEbONjkRgNfkUOioVgLZ7YvZsIXD70Kxj9qLbG9Qd8x",
	"whyawXcpGX9SMpOQjO+bxqM+C/oET+J/PZsHju6jDGT22CR7JAI9BTIDEpx6djbwfB/yFEtoRo+i+O78",
	"vCR9IXmRSBPLVwPU6a9n8SSocrpgsPf5wbAOdbyYjwLze1TUDaCBUL7GGVHTnFcYg3QgY92bsfbyuHUF",
	"piRlTmgbqoH712ACJmrMGLTU3L1hgCIEcLeBblYNbcgDdC+Mng/rfiX9VGDHMxXOck33EA+PiJCCz4jQ",
	"hnRjF3bA+KnxFE9c2qkOgQHgZLmrWMYlAAb9F/Nx0OL2QqZLTLKCg82mtLZdKNYPyV0ozq9G6WMG0QCc",
	"M94edqr+jDYgBF7Bk6Pi1943aKM/6ucVcxC3s+BCPuI6AN6FMzNrBGt9d14exvzd/Y5vvpoQ2O/qKwi/",
	"J0N/0PXXfZN3Dn379ULXSY9xqA25kekE3BApX0qYmqsv+uhYcZWoBbP3oSafKbtKEaIH2hMkfm3FEAlc",
	"S8753cjgTrnZ4s4YTJ4B2j4xWQNrN4HtJab8PZSCalzL/Xihepu9BW7b7qu21ImSp4jMEByGCE1/V3uL",
	"Tf3Tb0Buhg7/DPjtKzv3oO0nCc8Yu/aLz+CpBkJGzUbokpkIBZU40UITNphko+PRGrKM/UXyQsjbjCXT",
	"FO5H4xHFG9C3EIWQ32csQRLwRoFBJ/CN1lLm4vjoqD5MUUbjEsMNv55dImEy7ep1ujYXT3kiPsRRIZSM",
	"/vs3M3Q9m5ycL/yMyrMc6GL+7bW+bJMsYX7W0pE7up/jbsbZMojReJSRBCxh2JOe5DhZw+Tr6ZvWIbfb",
	"7RTrn6eMr47sWHH0djE7fX95qsZM5YNBo481oqP6nknoClpeXc8uXxsrWBhAvZmqhbVpBxTnZHQ8+mb6",
	"Ru8lx3Kt6evILyc6/jxagQzFa2TBqXDxykjRlqJk7JLoRn8F+aM3dXVtrpf9+s0bRzlgbj+9JMMjJWKr",
	"jiN9bBAqoNL02RBv/6tZQBSbDea7svAKzez+wvVVj+PRkSUBD/PiyKb/V36n3vnEBRByFopXuHK7YBJz",
	"M9xV3vm2YTugPNFGmb5n6e7FAN277OPj4+MBEd1frTgE7U9DgkcgpRMfo43cXFBN9NXcJMUSayr5ZeIl",
	"EYQJxF5tCaTzCMJ5MH5mlJdWWUsTaJOMnTmS9nEIahmUcXJgihmWVjCEaoZmKT2JTmq+f5gyPtiU7PKK",
	"1tN3ZVmeZGV0uV7FZQu1bLp9PVc9Riq16/hDEki1zheihubF8V74ryUpDMZ0IdYNTdErC1oYt6mefgaQ",
	"rpLRsXckvdQObZfUxZvniTawHbnvPRTSe66X4yTQh6Do3fw+iBKS8f10ur5hEs/V6H3XcIdARfeaB+bF",
	"nou5ISz5FMjvQwv2mgMm9euFHnpw9wMiejdSeJdBdSoYcLdwCELoXfbAtNB/GTWEHIYDvocIbJ2yOPps",
	"/7WYPx55EVDznaYAL8v9H5EaZJeDb9LtiPpFOV+VN1wuMvIjQpIXMPbg1wxyfBpH6G/RrLIJyXwmZCPJ",
	"/1DyPlTr8gLk1AinDSAPvRGUDFXfvURQ9Qz5LVKBuZAXtZ5zEUddEYNHB2XTp0NQQ3eewK9CF52QegEK",
	"Ofps/ruYP3bFVziBexDN/NqO4EoIZb8iJY7DvXP0LIFFRPXrXtT+hYljAGL2JpGajVH2FWEkTX6zwsSr",
	"kiZllTTxS7gXwfirHyslVLf3sWmT9YszEWvYEuoFW36q2/xlbFsz9/xa5TbfuOLWinlcvfmh1F+4sP7A",
	"BlWsfnqQnuyrzI/RvKLgo9Lsiso6E9n6evomHD9xDYAtMkx7KN2KpWyx0mzO4ZfD1NF9RtKktCj75GNv",
	"3ZZmtJ8L4LuK05qlV88QmFdVhxPTnXhJjKcYWtcv7HvGmieovMNDKXByD2nZSsDYzeW9h+sCoxsU2Izd",
	"YJru2Ja72JEpwivF4tI0v4keiKVwU10oPvNUJoPI7HmLq9Y15oy2uYJbbNiWbsyco71xGkz55rb/g1Es",
	"yjGZ4BXQsveMwe9Xovyw1n7L9cfJdgiExLcZ0VnzZWOQ4JK2t06tkc6KCGnbSOWcaf5i3HSm2eA793k0",
	"GzvMEWbDNgl7T2CZNtz19uI9C5rqyf0IhLpOR6b42G8DYmEjGdpgYlqFmWY/Lu/erxTQvclwlt3i5M6o",
	"tiDobRMiYboUmTVt116LXQtpjxDUlHVqMAtUPYcufzz78HZeqkabR3GvRIeu9mdCTASR1W6XjK+A76KA",
	"LHMen07frqJEafZ72Bnydn/Dt6yQDUvKfGFLscuGgKY98xS9c13BIot4loEhfl2mplv+3NQj4CXGavgh",
	"FCXYXNMHGpCJGKTCRTR7Qc7cGn8l7LUzmjFKIZGuaP3DxVuDbtcqkWSZ7ofkykrYPfBdybRatEngG0LB",
	"A+hXCkQ5viUZkQSEJlcnRMQUXZzOzt69O30/P50rSMx3FG9I4qvWi27WM6vcWDPgiSyoozJrHcyuKOHd",
	"yf/p4xK/f3fJarazkyQb8guUjPOV0D2UOAGawAucTqdzr03B6l6Oj9d1zWrynX36AbgWKBZtrg0gPEhX",
	"MdSwooFP0Um0y5lSx1XJUI6F7TiGabB7YykGnIKvbPkK8raep9Ws0W8Ap/sjqSFVJzSzxZrMap/kqlpz",
	"UwiJJL7TPgJTkp4V1LaaKye19YyrAisDEGzndk5WhKqf7TmIsJOOUcKKLFUSAVOEpVRCOYJbL8X76f7n",
	"N2++7jDZHybb7XayZHwzKXgGVJkTad2GDxf6NGID7rmJgHrRdswKqLJ5e15CiY3W9q6plDJlZtnOthwl",
	"2tyzNapKHRJJVs7v4kTcKamZAb6LvMIRzvR3x3FNIT+aDz+OPFJTFptrhWUtTauVIw3p1NngASfS0qHt",
	"EOjbskaD9qdGunqLvlDBD6ygacN10h5T361wVUdWOk1D7n+1HhA1xUmoa0JphIMi+triZW++tld08Mvd",
	"9lMSB/Z5A7nAQ9zdhpfbjagc8ziGZoZEBdDU5W+ECyeNyZftWj0+nbmo1PQKpGgWpFYdHZWY9I0fLNrV",
	"lq600tOfvGpwGW+E0SaWYMnkfhdSewvDgY2m/wUM0GhL50hzqWAMoT1J3d8+/m1EBnq26Xzw4xfw+J/a",
	"R/ffFt2vb9EFemR4QYfjf7EozBdsULV3wGaoWfjviEy4mngd7A31G3OeW1uvxwWOf/exj76uEx1N9+pq",
	"NuRZtI3iP7xotl2s2UXAOp7Zvp2P49G3b74LFLgYJfueSXSSZWxrP/3DN+EG2YrCT6kkcoeuGENvMV+B",
	"HvD1n0Odhxl6h+nOwV2EDPVIe5gBPtZeOVynTsTrJ2owTTPFv40232Vv7bDN3MxlOpyp3PUQgtbKt4Dg",
	"5wJnqOD0mIBcHmuRJY51btyxHj9R449D3QeCTyUO6JowcK5404Tyl/GIFpnuZuViNN0M6QFkHG2o0M+G",
	"L+ebhp7ljDinivMC6a7f4xRVjnSbLyKkaYi3lvYY4A2n8+J3tmoN91WdKUqf1LuEb3ddVEqZKS1YAGIF",
	"r78uEMtDV2zk+qT3Xd56bWOqkggv6TN2v/e8i0YXQuy6TXlOeDEoVy1AAlTgAasD2+U7mp2BptqDJuZp",
	"EPWB9ktw/c3esldxGY1iy1Co0UQtjDG3xsL62IEnjjr6ULYp5Mo+iHsg4drhbLceuHGet3Fy/BdR/Fcb",
	"Yg9V98i4cSQ+HInrtkOgwx/IVjZLWeoZigzwXS7ZiuN8bT1VjmnKNu4hzuaDMVWn0Xg3MWtXG4LqciC6",
	"tF3Es2k/pBPxc7rdyBa+P9YGtELY1sdIe2Ii2LymQ+wjMqLcf/lGdb8JWtN4Vq7V0fhPp/Jqj59EJZ6F",
	"8sQc+uhzUZD0sbfO1RGlGdWWO3ZV8yr097sPhc3D2btopdkTzCyoHN/CzBl4TLNTD6phSvzWJwxnCRbF",
	"nulDavWyELqex9isbfLetLBapg5BXXQba8J3IFFO0tgb0ou5JSctFU3HR9p+0ioBkpsIQxk+2IDEOtBe",
	"hZavz81k+4Q/LmUZ/gqLx8arK8E2S3nseG5H1bYZBcQ42jAOyKsq9xsCiEhrhYFCpHG+QkkDtcvvQj//",
	"YJqmNDOzbQyoDDTX3qGpZaCaOEKt04I2f90Lb9ezS4+Z/DYGUYr+LB90QneGycYTGE1BYPKDF95IXSH6",
	"3Hr3wCvXptGv12rGT0cuHJ8/IQG+D8wrkGZxz2SzYUwtbO/z2sN/YUD3JafPdQyxqmEMiyz9WM3TRVZv",
	"yr5pe9Kfhz03jT30HAdKwW4XaTR7Hh2qSCPYo+vQJWCxfk6DKr+aHb4G8PqLp+Z/cZIok7xJmnjy50sk",
	"stvHrb5kFrv3EtWLCLWX1h1BevIn/V0IF98AOKh0aTW0+iLyJdjwaA8Jk9fBE6EJRwFXuxwew4SxhSyb",
	"6Md8j1KSTsxzuL1uSfVp2yUp3+Y/ZKedapFhxVMu36U84f4Ojat1ujK+bZwZrp5dgFGWVaUvynUaKDra",
	"Ys5XtYE6PjrKWIKzNRPy+L/e/OnNSPGohVBzdyamOTGBlNR0zm7calVbtTdv7TM6Uh04T0nZgdhnuxdU",
	"Nc7vofT46fH/AwAA//8WHuGHSo4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
