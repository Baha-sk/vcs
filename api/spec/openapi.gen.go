// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MkWfPzz/XwAAAP//OA58lyZSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
