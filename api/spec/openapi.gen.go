// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
