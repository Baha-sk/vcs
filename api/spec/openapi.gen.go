// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qGqc30Pp4dPD/wUAAP//99j+1EaPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
