// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
