// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p8gFjLpdeHHh6ePT/wUAAP//J98z/v9aAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
