// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
