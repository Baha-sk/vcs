// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
