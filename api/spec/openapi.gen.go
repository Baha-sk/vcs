// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2+PrbOfKV/3cHPP7T/f/HwAA//9pGCkhoHMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
