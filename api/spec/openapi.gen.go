// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
