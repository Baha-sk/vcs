// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zZYC2VZVPT9L6eHTw78CAAD//4UJZu0uYAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
