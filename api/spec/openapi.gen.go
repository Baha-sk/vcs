// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z7Pmturn16ref77//wAAAP//56iAONNwAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
