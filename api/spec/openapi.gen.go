// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pj38XwAAAP//nqXXYzVlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
