// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
