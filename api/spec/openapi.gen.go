// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
