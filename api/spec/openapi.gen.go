// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
