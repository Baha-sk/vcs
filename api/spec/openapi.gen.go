// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tFcK9GNt5vl9TOv36/8EAAD//yo+23e3PwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
