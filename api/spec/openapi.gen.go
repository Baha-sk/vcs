// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
